Chaper 3. 람다 표현식
 - 이전 Chaper2.에서 동작 파라미터화를 이용해서 변화하는 요구사항에 효과적으로 대응하는 코드를 구현
 - 동작 파라미터를 활용하면 더 유연하고 재사용할 수 있는 코드를 만들수 있음.
 - 익명 클래스로도 구현 가능하지만, 깔끔하지 않다.
 - [람다 표현식]은 익명 클래스처럼 이름이 없는 함수 & 메서드를 인수로 전달한다 (~= 익명 클래스)
-------------------------------------------------------------------------------------------------------------------------
3.1 람다란 무엇인가?
 람다란?
 1) 메서드로 전달할 수 있는 익명 함수를 단순화
 2) 이름은 없지만 파라미터 리스트, 바디, 반환 형식, 발생할 수 있는 예외 리스트를 가질 수 있다.
 
 람다의 특징
 - 익명 : 보통 메스드와 다르게 이름이 없다.
 - 함수 : 메서드처럼 특정 클래스에 종속되지 않음. 하지만, 파라미터 리스트, 바디, 반환 형식, 발생할 수 있는 예외 리스트를 가진다.
 - 전달 : 메서드 인수로 전달하거나 변수로 저장 가능.
 - 간결성 : 익명 클래스처럼 자질구레한 코드 구현할 필요 없음.
 
 ex) Comparator 객체의 활용
 Comparator<Apple> byWeight = new Comparator<Apple>(){
  public int compare(Apple a1, Apple a2){ return a1.getWeight().compareTo(a2.getWeight()));
 };
 
 Comparator<Apple> byWeight = (Apple a1, Apple a2) -> (a1.getWeight().compareTo(a2.getWeight());
 
 * 람다 표현식의 3 부분
 (Apple a1, Apple a2) -> (a1.getWeight().compareTo(a2.getWeight());
 -----------------(1) --(2) ----------------------------------------(3)
 
 (1) 파라미터 리스트 : Comparator의 compare 메서드 파라미터
 (2) 화살표 : -> 람다의 파라미터 리스트와 바디를 구분.
 (3) 람다 바디 : 람다의 반환값에 해당하는 표현식 
 
-------------------------------------------------------------------------------------------------------------------------
3.2 어디에, 어떻게 람다를 사용할까?
 람다식은 다음과 같이 활용될 수 있다.
 List<Apple> greenApple = filter(Apple, (Apple a) -> GREEN.equals(a.getColor()));
 -> 함수형 인터페이스라는 문맥에서 람다를 사용할 수 있다.
 다음 예제에서는 Predicate<T>를 기대하는 filter 두번째 인자로 사용하였다.
 
3.2.1 함수형 인터페이스
 2장에서 만든 Predicate<T> 인터페이스로 필터 메서드를 파라미터화할 수 있었음을 기억하는가?
 Predicate<T>가 바로 함수형 인터페이스다.
 오직 하나의 추상 메서드만 지정하기 때문이다.
 
 public interface Predicate<T>{
  boolean test(T t);
 }

 public interface Comparator<T>{
  int compare(T o1, T o2);
 }
 
 public interface Runnable{
  void run();
 }
 
 public interface ActionListener extends EventListener{
  void actionPerformed(ActionEvent e);
 }
 
 public interface Callable<V>{
  V call() throw Exception;
 }
 
 public interface PrivilegedAction<T>{
  T run();
 }

 람다 표현식으로 함수형 인터페이스의 추상 메서드 구현을 직접 전달할 수 있으며,
 전체 표현식을 함수형 인터페이스의 인스턴스로 취급한다.
 
 ex) Runnable r1 = () -> System.out.println("Hello world 1");
 Runnable r2 = new Runnable(){
  public void run(){
    System.out.println("Hello World2");
  }
 }
 
 3.2.2 함수 디스크립터
  함수형 인터페이스의 추상 메서드 시그니처는 람다 표현식의 시그니처를 가리킨다.
  람다 표현식의 시그니처를 서술하는 메서드를 함수 디스크립터라고 부른다.
  
  ex) Runnable 인터페이스의 run은 인수와 반환값이 없으므로 (void반환) Runnable 인터페이스는 인수와 반환값이 없는 시그니처로 생각할 수 있다.
  
  @FunctionalInterface
  - 함수형 인터페이스임을 가리키는 어노테이션이다.
  따라서 선언한 후, 함수형 인터페이스가 아니면 컴파일러 에러이다.

-------------------------------------------------------------------------------------------------------------------------
3.3 람다 활용: 실행 어라운드 패턴
  자원처리에 사용하는 순환 패턴은 자원을 열고, 처리한 다음에, 자원을 닫는 순서로 이뤄진다.
  즉, 실제 자원을 처리하는 코드를 설정과 정리 두 과정이 둘러싸는 형태를 가지며 이를 실행 어라운드 패턴이라고 한다.
  
  ex) 다음은 파일에서 한 행을 읽는 코드이다.
  public String processFile() throws IOException{
    try(BufferedReader br = new BufferedReader(new FileReader("data.txt"))){
      return br.readLine();
    }
  }
 3.3.1 1단계  : 동작 파라미터화를 기억하라.
  해당 위의 코드에서는 한줄만 읽을 수 있다.
  한번에 2줄을 읽거나 가장 자주 사용되는 단어를 반환하려면 어떻게 해야될까?
  기존 설정, 정리 과정을 재사용하고 processFile매서드만 다른 동작을 수행하도록 명령할 수 있다면 좋을 것이다.
  즉, processFile 동작을 파라미터화 하는 것이다.
  
  람다를 이용하여 한번에 두 행을 읽게하려면 다음과 같이 가능하다.
  String result = processFile((BufferReader br) -> br.readLine() + br.readLine());
  
 3.3.2 2단계 : 함수형 인터페이스를 이용해서 동작 전달.
  함수형 인터페이스 자리에 람다를 사용할 수 있다.
  BufferedReader -> String과 IOException을 던질 수 있는 시그니처와 일치하는 함수형 인터페이스는 다음과 같다.
 
  @FunctionalInterface
  public interface BufferedReaderProcessor {
   String process(BufferedReader b) throws IOException;
  }
 
  그리고 인터페이스를 processFile메서드로 인수를 전달할 수 있다.
  public String processFile(BufferedReaderProcessor p) throws IOException {
 
  }
 
 3.3.3 3단계 : 동작 실행
 
 public String processFile(BufferedReaderProcessor p) throws IOException {
  try(BufferedReader br = new BufferedReader(new FileReader("data.txt"))){
   return p.process(br);
  }
 }
 
 3.3.4 4단계 : 람다 전달
 람다를 이용해서 다양한 동작을 processFile메서드로 전달가능하다.
 String oneLine = processFile((BufferReader br) -> br.readLine());
 
 String twoLine = processFile((BufferReader br) -> br.readLine() + br.readLine() );
 
-------------------------------------------------------------------------------------------------------------------------
3.4 함수형 인터페이스 사용
 - 함수형 인터페이스는 오직 하나의 추상메서드를 지정하고, 람다의 시그니처를 묘사한다.
 함수형 인터페이스의 추상 메서드 시그니처를 함수 드시크립터라고 한다.
 자바 api는 Comparable, Runnable, Callable 등의 다양한 함수형 인터페이스를 포함하고있다.
 
 3.4.1 Predicate
  - java.util.function.Predicate<T> 는 test라는 추상 메서드를 정의하며, test는 제네릭 형식 T의 객체를 인수로 받아 불리언을 반환.
  
  @FunctionalInterface  // 함수형 인터페이스
  public interface Predicate<T> {
   boolean test(T t);
  }
  
  public <T> List<T> filter(List<T> list, Predicate<T> p){
   List<T> results= new ArrayList<>();
   for(T t:list){
    if(p.test(t)) result.add(t)
   return results;
  }
  
  Predicate<String> nonEmptyStringPredicate = (String s) -> !s.isEmpty();
  List<String> nonEmpty = filter(listOfString, nonEmptyStringPredicate);
  
 3.4.2 Consumer 
  - java.util.function.Consumer<T> 는 제네릭 형식 T객체를 받아서 void반환하는 accept라는 추상 메서드를 정의한다.
  
  @FunctionalInterface
  public interface Consumer<T> {
   void accept(T t);
  }
  
  public <T> void forEach(List<T> list, Consumer<T> c){
   for(T t : list) c.accept(t);
  }
  
  forEach(
   Arrays.asList(1, 2, 3, 4, 5), (Integer i) -> System.out.println(i)
  );

  3.4.3 Function
   - java.util.function.Function<T, R> 제네릭 형식 T를 인수로 받아서 제네릭 형식 R객체를 반환하는 추상 메서드 apply정의한다.
   ex) String리스트 인수로 받아 각 String 의 길이를 포함하는 Integer 리스트로 변환하는 map메서드 정의하는 예제.
   
   @FunctionalInterface
   public interface Function<T, R> {
     R apply(T t);
   }
   
   pubic <T, R> List<R> map(List<T> list, Function<T, R> f){
    List<R> result = new ArrayList<>();
    for(T t: list){
     result.add(f.apply(t));
    }
    return result;
   }
   
   List<Integer> l = map(Arrays.asList("lamdas","in","action"), (String s) -> s.length());
   
   [기본형 특화]
    - 자마의 모든 형식은 참조형(Byte, Integer, Object, List) 아니면 기본형(int, double, byte, char)에 해당한다.
    하지만 제네릭 파라미터에서는 참조형만 사용할 수 있다.
    - 자바는 기본형 변환하는 기능을 제공하는데 기본형 -> 참조형(boxing), 참조형 -> 기본형(unboxing)
    - 자바는 박싱과 언박싱을 자동적으로 이루어지게 한다. 하지만 이러한 변환 과정은 비용이 소모된다.
    그래서 오토박싱을 피할 수 있는 방식이 있다.
    
    ex) Predicate -> IntPredicate/ DoublePredicate/ LongBinaryOperator 등의 형식명이 앞에 붙는다.

-------------------------------------------------------------------------------------------------------------------------
 3.5 형식 검사, 형식 추론, 제약
  람다 표현식에서는 어떤 함수형 인터페이스를 구현하는 정보가 포함되어있지 않으므로 람다 표현식을 더 제대로 이해하기 위해서는 실제 형식을 파악해야한다.
  
  3.5.1 형식 검사
  람다가 사용하는 콘텍스트context를 이용해서 람다의 형식을 추론할 수 있다.
 
  ex) List<Apple> heavierThan150g = filter(inventorty, (Apple apple ) -> apple.getWeight() > 150);
  1. filter 메서드의 선언을 확인해라
  2. filter 메서드의 2번째 파라미터로 Predicate형식을 기대한다.
  3. Predicate는 test라는 하나의 추상 메서드를 가지고 있음
  4. test메서드는 Apple을 받아서 boolean을 반환하는 함수 디스크립터를 묘사한다.
  5. filter메서드로 전달된 인수는 이와  같은 요구사항을 만족해야한다.
  (6) 람다 표현식에서 예외를 던질 수 있다면, 추상 메서드로 같은 예외를 던질 수 있도록 throws로 선언해야한다.
  
  3.5.2 같은 람다, 다른 함수형 인터페이스
  대상 형식이라는 특징 때문에 같은 람다 표현식이더라도 호환되는 추상 메서드를 가진 다른 함수형 인터페이스로 사용될 수 있다.
  Callable, PrivilegedAction인터페이스는 인수를 받지 않고 제네릭 형식 T를 반환.
  ex) Callable<Integer> c = () -> 42;
  PrivilegedAction<Integer> p = () -> 42;
  위에서 보는 바와 같이 하나의 람다 표현식을 다양한 함수형 인터페이스에 사용할 수 있다. 

  3.5.3 형식 추론
  코드를 더 단순화할 수 있는 방법이 있다.
  자바 컴파일러는 람다 표현식이 사용된 컨텍스트를 이요하여 람다 표현식과 관련된 함수형 인터페이스를 추론한다.
  
  Comparator<Apple> c = (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight()); <= 형식 추론x

  Comparator<Apple> c = (a1, a2) -> a1.getWeight().compareTo(a2.getWeight()); <= 형식 추론O
  
  상황에 따라 명시적으로 형식을 포함하는 것이 좋을때도 있고 형식을 배제하는 것이 가독성을 높히기도 한다.
  정해진 방식이 없으니 스스로 결정하는 것이 좋다.
  
  3.5.4 지역 변수 사용
  지금까지  람다 표현식에서는 익명 함수가 하는 것처럼 자유 변수(파라미터로 넘겨진 변수가 아닌 외부에서 정의된 변수)를 활용 할 수 있다. 
  이와 같은 동작이 람다 캡처링이다. 
  하지만 자유 변수에도 제약이 있다.
  람다는 인스턴스 변수와 정적 변수를 자유롭게 사용할 수 있다. 
  하지만 그러기 위해서는 지역 변수는 명시적으로 final로 선언되어 있거나 실질적으로 final로 선언된 변수와 같이 사용되어야 한다. 
  즉, 람다 표현식은 한 번만 할당할 수 있는 지역 변수만 사용할 수 있다. 
  
  따라서 
  int portNumber = 133;
  Runnable r = () -> System.out.println(portNumber); <- 람다에서는 실질적으로 final처럼 취급되어야한다.
  portNumber = 311; 

  왜? 지역변수의 제약?
  - 람다에서 지역 변수를 사용하는 것은 직접 접근하는 것이 아니라 지역변수의 [복사본]을 사용한다. 
    이때 람다에서 지역변수에 바로 접근하게 될 경우를 스레드에서 실행될 때 지역 변수의 할당이 해제되는 경우가 발생하게 된다.
    따라서 자바 구현에서는 복사본을 제공하고 복사본의 값이 바뀌지 않아야하므로 다음과 같은 제약사항이 발생한 것.

-------------------------------------------------------------------------------------------------------------------------
 3.6 메서드 참조
 메서드 참조를 이용하면 기존의 메서드 정의를 재활용해서 람다처럼 전달할 수 있다.
 때로는 람다 표현식보다 메서드 참조가 가독성이 더 좋으며 자연스러울 수 있다./
 
 ex) inventory.sort((Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight()));
  == inventory.sort(comparing(Apple::getWeight));
  
 3.6.1 메서드 참조가 왜 중요한가?
 메소드 참조는 특정 메서드만을 호출하는 람다의 축약형이라고 생각할 수 있다.
 실제로 이를 이용하면 기존 메서드 구현으로 람다 표현식을 만들수 있다.
 그리고 가독성을 높일 수 있다.
 
 메서드 함수는 메서드명 앞에 구분자(::)를 붙이는 방식으로 활용.
 실제로  (Apple a) ->a.getWeight() 를 축약한 것이 Apple::getWeight
 
 [만드는 방식]
  1) 정적 메서드 참조 
     ex) Integer의 parseInt메서드는 Integer::parseInt로 표현할 수 있다.
  2) 다양한 형식의 인스턴스 메서드 참조 
     ex) String의 length메서드는 String::length로 표현
  3) 기존 객체의 인스턴스 메서드 참조
     예를들어, Transaction객체를 할당받은 expensiveTransaction 지역변수가 있고, Transaction객체에는 getValue메서드가 있다면, 
     이를 expensiveTransaction::getValue라고 표현한다.
     
  ex) 
  private boolean isValid(String string){
   return Charater.isUpperCase(string.charAt(0));
  }
  => filter(word, this::isValid)
  
  ex) List<String> str = Arrays.asList("a","b","A","b");
  str.sort((s1, s2) -> s1.compareToIgnoreCase(s2));
  
  = str.sort(String::compareToIgnoreCase);
  
 3.6.2 생성자 참조
 ClassName::new처럼 클래스명과 new키워들ㄹ 이용해서 기존 생성자의 참조를 만들 수 있다.
 
 예를들어 Supplier의 () ->Apple과 같은 시그니처를 갖는 생성자가 있다고 가정하자.
 ex1)
 Supplier<Apple> c1 = Apple::new;
 Apple a1 = c1.get();
 
 = 
 
 Supplier<Apple> c1 = new Apple();
 Apple a1 = c1.get(); <- 새로운 Apple객체를 만들 수 있다.
 
 ex2)
 Function<Integer, Apple> c2 = Apple::new;
 Apple a2 = c2.apply(110); <- new Apple(weight)
 
 =
 
 Function<Integer, Apple> c2 = (weight) -> new Apple(weight);
 Apple c2 = c2.apply(110);
 
 ex3) Apple(color, weight)
 BiFunction<Color, Integer, Apple> c3 = Apple::new;
 Apple a3 = c3.apply(GREEN, 110);
 
 = 
 
 BiFunction<String, Integer, Apple> c3 = (color, weight) -> new Apple(color, weight);
 Apple a3 = c3.apply(GREEN, 100);
   
-------------------------------------------------------------------------------------------------------------------------
3.7 람다, 메서드 참조 활용하기
 - 사과 리스트를 다양한 정렬 기법으로 다뤄보자.

 3.7.1 1단계: 코드 전달
 
 Comparator 
 void sort(Comparator<? super E> c)
 
 public class AppleComparator implements Comparator<Apple> {
  public int compare(Apple a1, Apple a2){
   return a1.getWeight().compareTo(a2.getWeight());
   }
 }
 inventory.sort(new AppleComparator());
 
 3.7.2 2단계 : 익명 클래스 사용
 
 한번만 사용할 Comparator이라면 익명 클래스 사용하는게 좋다.
 inventory.sort(new Comparator<Apple>(){
  public int compare(Apple a1, Apple a2){
    return a1.getWeight().compareTo(a2.getWeight());
    }
 }
 
 3.7.3 3단계 : 람다 표현식 사용
 inventory.sort((Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight()));
 
 형식을 추론
 inventory.sort((a1,a2) -> a1.getWeight().compareTo(a2.getWeight()));
 
 Comparator
 inventory.sort(comparing(apple -> apple.getWeight());
 
 3.7.4 4단계 : 메서드 참조 사용
 inventory.sort(comparing(Apple:getWeight);
 
-------------------------------------------------------------------------------------------------------------------------
 3.8 람다 표현식을 조합할 수 있는 유용한 메서드
  자바8 API의 몇몇 함수형 인터페이스는 COomparator, Function, Predicate와 같은 함수형 인터페이스를 람다 표현식을 조합해서 쓸 수 있도록
  제공. 즉, 간단한 여러 개의 람다 표현식을 조합해서 복잡한 람다 표현식을 만들 수 있음.
  
  3.8.1 Comparator 조합
  Comparator.comparing을 이용하여 비교해서 사용할 키를 추출하는 Function 기반의 Comparator를 반환할 수 있다.
  Comparator<Apple> c = Comparator.comparing(Apple::getWeight);
  
  역정렬?
   사과의 무개를 내림차순으로 정렬하고 싶다면?
   inventort.sort(comparing(Apple::getWeight).reversed()); <- 무게 내림차순
  
  Comparator과 연결
   비교를 한다음에 다음 2번쨰 비교자를 만들고 싶다면? thenComparing
   ex) 무개로 내림차순 정렬하고 같은 순위에 대해서는 국가별로 정렬하고 싶음
   inventort.sort(comparing(Apple::getWeight)
     .reversed() <- 무게 내림차순
     .thenComparging(Apple::getCountry)
     ) 
     
  3.8.2 Predicate 조합
  Predicate 인터페이스는 negate, and, or 세가지 메서드를 제공한다.
  ex) 빨간색이 '아닌' 사과 
  Predicate<Apple> notRedApple = redApple.negate();
  
  빨간색이면서 무거운 사과
  Predicate<Apple> redAndHeavyApple = redApple.and(apple -> apple.getWeight() > 150);
  
  빨간색이면서 무거운 사과 혹은 그냥 녹색 사과
  Predicate<Apple> redAndHeavyOrGreen = redApple.and(apple -> apple.getWeight() > 150).or(apple -> GREEN.equals(a.getColor()));
  
  3.8.3 Function 조합
  andThen, compose 두가지 디폴드 메서드 제공
  1) andThen은 주어진 함수 먼저 적용하고 결과를 그 다음 함수의 압력으로 전달
  Function<Integer, Integer> f = x -> x+1;
  Function<Integer, Integer> g = x -> x*2;
  Function<Integer, Integer> h = f.andThen(g);
  
  int result = h.apply(1); -> (1+1) * 2  = 4
  
  2) compose는 andThen과 역순으로 동작
  Function<Integer, Integer> f = x -> x+1;
  Function<Integer, Integer> g = x -> x*2;
  Function<Integer, Integer> h = f.compose(g);
  
  int result = h.apply(1); -> (1*2) + 1  = 3
  
-------------------------------------------------------------------------------------------------------------------------
 3.10 마치며
  - 람다 표현식은 익명 함수의 일종이며 이름은 없지만, 파라미터 리스트, 바디, 반환형식을 가진다
  - 간결하게 코드 구현 가능
  - 함수형 인터페이스는 하나의 추상 메서드만을 정의하는 인터페이스
  - 함수형 인터페이스를 기대하는 곳에서만 람다 표현식 사용가능
  - 람다 표현식 전체 = 함수형 인터페이스의 인스턴스
  - Predicate, Function, Supplier, Comsumer, BinaryOperator등을 포함해서 자주 사용하는 다양한 함수형 인터페이스 제공
  - 박싱 동작 피할 수 있는 기본형 특화 인터페이스 제공
  - 실행 어라운드 패턴을 람다와 활용하면 유연성 + 재사용성을 얻음
  - 람다 표현식의 기대형식은 대상 형식
  - 메서드 참조를 이요하면 기존의 메서드 구현을 재사용하고 직접 전달 가능
  - Comparator, Predicate, Function 같은 함수형 인터페이스는 람다 표현식을 조합할 수 있음.
