Chaper 4. 스트림 소개
 - 거의 모든 자바 애플리케이션은 컬렉션을 만들고 처리하는 과정을 포함한다.
 - 컬렉션으로 데이터를 그룹화하고 처리할 수 있다.
 - 많은 요소를 포함하는 커다란 컬렉션은 어떻게 처리? 병렬 처리 코드를 구현하는 것은 단순 반복 처리 코드에 비해 복잡하다
 -> 프로그래머의 시간을 단축 & 편리하기 위한 선택 -> stream!
 
 4.1 Stream 이란 무엇인가?
  - 스트림은 java8 api에 새로 추가된 기능이다.
  - 스트림을 이용하면 선언형으로 컬렉션 데이터를 처리할 수 있다.
  - 스트림을 이용하면 멀티스레드 코드를 구현하지 않아도 데이터를 투명하게 병렬로 처리할 수 있다.
  
  ex) 저칼로리의 요리명을 반환하고, 칼로리 기준으로 요리를 정렬하는 코드
  List<String> lowCalaricDishesName = menu.stream().filter(d -> d.getColories() < 400) <- 400 칼로리 이하의 요리 선택
                                          .sorted(comparging(Dish::getCalories))       <- 칼로리로 요리 정렬    
                                          .map(Dish::getName) <- 요리명 추출
                                          .collet(toList());  <- 리스트에 저장
                                          
  List<String> lowCalaricDishesName = menu.paralleStream().filter(d -> d.getColories() < 400) <- 400 칼로리 이하의 요리 선택
                                          .sorted(comparging(Dish::getCalories))       <- 칼로리로 요리 정렬    
                                          .map(Dish::getName) <- 요리명 추출
                                          .collet(toList());  <- 리스트에 저장


  - 이와 같이 stream은 선언형으로 코드를 구현할 수 있다.
  - filter, sorted, map, collect 와 같은 연산은 고수준 빌딩 블록으로 이루어져 있으므로 특정 스레딩 모델에 제한되지 않고 자유롭게 사용할 수 있다.
  - 데이터 처리 과정을 병렬화하면서 스레드와 락을 걱정할 필요가 없다.
  
  [Stream api의 특징 요약]
  1) 선언형 : 더 간결하고 가독성이 좋아진다.
  2) 조립할 수 있음 : 유연성이 좋아진다
  3) 병렬화 : 성능이 좋아진다.
  
 4.2 스트림 시작하기
  - stream이란? 데이터 처리 연산을 지원하도록 소스에서 추출된 연산되 요소로 정의
  - 연속된 요소 : 특정 요소 형식으로 이루어진 연속된 값 집합의 인터페이스를 제공한다.
  - filter, sorted, map처럼 주로 계산식이 주를 이룬다.
  - collection의 주제는 데이터고, stream은 계산이다.
  - 정렬된 컬렉션으로 스트림을 생성하면 정렬이 그대로 유지된다.
  - 데이터 처리 연산 : 순차적으로 또는 병렬로 실행할 수 있다.
  - 파이프라이닝 : 대부분의 스트림 연산은 스트림 연산끼리 연결해서 커다란 파이프라인을 구성할 수 있도록 스트림 자신을 반환
  - 게이름, 쇼트서킷과 같은 촤적화도 얻을 수 있다(5장 참조)
  - 내부 반복 : 4.3.2 참조
  
   ex)
   List<String> lowCalaricDishesName = menu.stream()
          .filter(d -> d.getColories() < 400) <- 400 칼로리 이하의 요리 선택
          .sorted(comparging(Dish::getCalories))       <- 칼로리로 요리 정렬    
          .map(Dish::getName) <- 요리명 추출
          .limit(3)           <- 선착순 3개만 선택
          <-------------- collect를 제외한 모든 연산은 서로 파이프라인을 형성할 수 있도록 스트림을 반환
          .collet(toList());  <- 리스트에 저장
  - filter : 람다를 인수로 받아 스트림에서 특정 요소를 제외
  - map : 람다를 이용해서 한 요소를 다른 요소로 반환하거나 정보를 추출
  - limit : 정해진 개수 이상의 요소가 스트림에 저장되지 못하게 스트림 크기 축소
  - collect :  스트림을 다른 형식으로 반환
 
 4.3 스트림과 컬렉션 
  - 자바의 기존 컬렉션과 스트림 모두 [연속된] 요소 형식의 값을 저장하는 자료구조의 인터페이스를 제공
  - [연속]되었다는 것은 순서와 상관없이 아무 값에다하는 것이 아니라 순차적으로 값에 접근한다는 것을 의미.
  
  - 컬렉션 vs 스트림
  1) 데이터 언제 계산하냐는 차이 : 
    - 컬렉션은 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조. 즉, 컬렉션에 추가하기 전에 계산이 선행되어야함
    - 스트림은 요청할 때만 요소를 계산. 사용자가 요청하는 값만 스트림에서 추출한다는 것이 핵심. 사용자가 요청할 때만 값을 계산한다는 점에서 LAZY하다.
    
  2) 딱 한번만 탐색 할 수 있다.
    - 스트림은 한 번 탐색한 요소를 다시 참색하려면 초기 데이터 소스에서 새로운 스트림을 만들어야함.
    ex) List<String> title = Arrays.asList("java8","in","action");
    Stream<String> s = title.stream();
    s.forEach(System.out::println); <- title의 각 단어를 출력 
    s.forEach(System.out::println); <- java.lang.IllegalStateException
    
  3) 데이터 반복 처리 방법
   - 외부반복 : 컬렉션 인터페이스를 사용하려면 사용자가 직접 요소를 반복해야한다.
    ex) List<String> names = new ArrayList<>();
    Iterator<String> iterator = menu.iterator();
    while(iterator.hasNext()){
      Dish dish = iterator.next();
      names.add(dish.getName());
    }
   - 내부반복 : 스트림 라이브러리는 알아서 처리하고 결과 스트림값을 어딘가에 저장해준다.
    ex) List<String> names = menu.stream().map(Dish::getName).collect(toList());
     내부반복은 데이터 표현과 하드웨어를 활용한 병렬성 구현을 자동으로 선택한다.
     
 4.4 스트림 연산
  List<String> lowCalaricDishesName = menu.stream()
          .filter(d -> d.getColories() < 400) <- 중간 연산
          .sorted(comparging(Dish::getCalories))       <- 중간 연산
          .map(Dish::getName) <- 중간 연산
          .limit(3)           <- 중간 연산
          .collet(toList());  <- 스트림을 리스트로 변환
  - filter, map, limit : 서로 연결되어 파이프라인을 형성
  - collect로 파이프라인을 실행한 다음에 닫는다.
  
  연결할 수 있는 스트림 연산을 중간 연산자라고하고,
  스트림을 닫는 연산을 최종 연산이라고 한다.
  
  4.4.1 중간 연산 
   - filter, sorted같은 중간 연산은 다른 스트림을 반환한다.
   - 중간 연산을 연결해서 질의를 만들 수 있다.
   - 중간 연산의 중요한 특징은 단말 연산을 스트림 파이프라인에 실행하기 전까지는 아무 연산도 수행하지 않는다.
   - 중간 연산을 합친 다음에 합쳐진 중간 연산을 최종 연산으로 한번에 처리한다.
  
  4.4.2 최종 연산
   - 스트림 파이프라인에서 결과를 도출한다.


 4.6 정리
 - 스트림은 소스에서 추출된 연속 요소로 데이터 처리 연산을 지원.
 - 스트림은 내부 반복을 지원.
 - 스트림에는 중간 연산과 최종 연산이 있음
 - 중간 연산은 filter.map처럼 스트림을 반환하면서 다른 연산과 연결되는 연산
 - forEach, count 처럼 스트림 파이프라인을 처리해서 스트림이 아닌 결과를 반환하는 연산을 최종 연산.
 
 


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 

  
  
 
