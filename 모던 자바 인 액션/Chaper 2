Chapter 2. 동작 파라미터화 코드 전달하기
 * 변화하는 요구사항에 대응
 * 동작 파라미터화
 * 익명 클래스
 * 람다 표현식 미리보기
 
 우리가 어떤 상황에서 일을 하든 소비자의 요구는 항상바뀌고 그 요구사항에 맞춰 스토프웨어 엔지니링을 해야한다.
 ex) 농부라는 소비자가 재고목록 조사를 쉽게하도록 애플리케이션이 있다고하자.
 '녹색 사과를 모두 찾고싶어요.' 그런데 하루만에 '150그램 이상인 사과를 모두 찾고싶어요' 라고 계속해서 요구사항이 바뀌면
 어떻게 대응해야 할까?
 '엔지니어링적인 비용'을 가장 최소화할 수 있으면 좋을 것이다.
 또한 '새로운 기능을 쉽게 구현'할 수 있고 '장기적인 관점에서 유지보수가 쉬워야'한다.

[동작 파라미터화(behavior parameterization)]를 이용하면 자주 바뀌는 요구사항에 효과적으로 대응할 수 있다.
동작 파라미터화란 아직은 어떻게 실행할 것인지 결정하지 않은 코드 블록을 의미한다.
이를 코드 블록의 실행은 [나중]으로 미뤄진다.
예를 들어, =나중에 실행될 메서드의 인수로 코드 블록을 전달]할 수 있다.
결과적으로 코드 블록에따라 메서드의 동작 파라미터화 된다.

예를 들어, 우리 룸메이트는 차로 운전해서 슈퍼마켓에 갔다가 집으로 돌아오는 길을 알고있다.
그래서 룸메이트에게 빵, 치즈, 와인 등의 식료품을 사다 달라고햇다.
이 동작은 goAndBuy라는 메서드를 호출하면서 사려는 물품을 인수로 제공하는 것에 비유할 수 있다.
그런데 어느 날 너무 급한 일이 생겨서 룸메이트에게 우체국에서 소포를 받아와 달라고 부탁해야했는데 지금까지 룸메이트는 우체적에서
소포를 가져온 경험이 없다.
따라서 룸메이트에게 우체국에 가서 이 고객 주문번호를 사용하고, 관리자에게 얘기한 다음, 소포를 가져오면 된다. 라고 상세하게 부탁한다.
이메일로 상세한 부탁 내용을 룸메이트에게 전달하면 룸메이트는 이메일을 확인하는 즉시 부탁을 들어줄 것이다.
그럼 좀 더 포괄적인 작업 수행을 할 수 잇는 go 메서드를 비유할 수 있다.
원하는 동작을 go메서드의 인수로 전달 할 수 있다.

참조) https://madplay.github.io/post/java-behavior-parameterization

2.1 변화하는 요구사항에 대응하기.
 ex)  기존의 농장 재고목록에 애플리케이션에 리스트에서 green사과 필터링하는 기능을 추가한다고 가정하자.
 
 2.1.1 첫번째 시도: 녹색 사과 필터링
 enum Color { RED, GREEN } 
 public static List<Apple> filterGreenApples(List<Apple> inventory){ 
  List<Apple> result = new ArrayList<>(); <- 사과 리스트 누적
  for(Apple apple: inventory){
    if(GREEN.equals(apple.getColor()){   <- 사과 색상 지정
      result.add(apple);
    }
  }
 }
 
 만약에 여기서 색생이 늘어나거나 하게 된다면, 메서드를 복사해서 filterRedApples라는 새로운 메서드를 만들어야할까?
 이는 다음과 같은 규칙이 필요하다. 
 ["거의 미슷한 코드가 반복되어 존재한다면 그 코드는 추상화한다."]
 
 2.1.2 두번째 시도:색을 파라미터화
 색을 파라미터화 할 수 있도록 메서드를 추가하면 번화하는 요구사항에 좀더 유연하게 대응할 수 있다.
 
 public static List<Apple> filterGreenApples(List<Apple> inventory, Color color){ 
  List<Apple> result = new ArrayList<>(); <- 사과 리스트 누적
  for(Apple apple: inventory){
    if(apple.getColor().equals(color){   <- 파라미터로 넘긴 색상과 일치하면 누적
      result.add(apple);
    }
  }
  result result;
 }
 
 그런데, 요구사항이 색상이 아니라 무게라는 새로운 기준으로 바뀌게 된다면 어떻게 해야되는가?
 public static List<Apple> filterGreenApples(List<Apple> inventory, int weight){ 
  List<Apple> result = new ArrayList<>(); <- 사과 리스트 누적
  for(Apple apple: inventory){
    if(apple.getWeight() > weight ) {   <- 파라미터로 넘긴 색상과 일치하면 누적
      result.add(apple);
    }
  }
  result result;
 }
 
 이는 좋은 해결책이긴 하나, 목록을 검색하고 사과의 필터링 조건을 적용한다는 부분에서 두개의 메서드는 대부분 중복된다.
 이는 소프트웨어 공학의 DRY(don't repet yourself)라는 원칙을 어긴다.
 
 2.1.3 세번째 시도: 가능한 모든 속성을 필터링
 다음과 같은 시도는 좋지 못하다.
 
  public static List<Apple> filterGreenApples(List<Apple> inventory, Color color, int weight, flag boolean){ 
  List<Apple> result = new ArrayList<>(); <- 사과 리스트 누적
  for(Apple apple: inventory){
    if( (flag && apple.getColor().equals(color)) || (!flag && apple.getWeight() > weight)) {   <- 파라미터로 넘긴 색상과 일치하면 누적
      result.add(apple);
    }
  }
  result result;
 }
 
 이는 향후 요구사항이 변화하였을 때 바뀌기 힘들고 유연하게 대응할 수 없다.

2.2 동작 파라미터화
 2.1절에서 말한 파라미터를 추가하는 방법이 아닌 변화하는 요구사항을 좀 더 유연하게 대응하는 방법에는 프레디케이트라는 함수를 이용하면 좋다.
 [프레디케이스]는 참 또는 거짓을 반환하는 함수라고 한다.
 
 public interface ApplePredicate {
  boolean test(Apple apple);
 }
 
 public class AppleHeavyWeightPredicate implements ApplePredicate { <- 무거운 사과만 선택
  public boolean test(Apple apple){
    return apple.getWeight() > 150;
  }
 }
 
 public class AppleGreenColorPredicate implements ApplePredicate { <- 녹색 사과만 선택
  public boolean test(Apple apple){
    return GREEN.equals(apple.getColor());
  }
 }
 
 위 조건에 따라 filter 메서드가 다르게 동작할 것이라고 예상할 수 있다. 이를 디자인패턴이라고 부른다.
 전략 디자인 패턴은 각 알고리즘을 캡슐화하는 알고리즘 패밀리를 정의해둔 다음에 런타임에 알고리즘을 선택하는 기법이다.
 
 그런데 ApplePredicate는 어떻게 다양한 동작을 수행할 수 있을까?
 filterApples에서 ApplePredicate는 객체를 받아 애플의 조건을 검사하도록 메서드를 고쳐야한다.
 이렇게 동작의 파라미터화 즉, 메서드가 다양한 동작을 받아서 내부적으로 다양한 동작을 수행할 수 있다.
 
 2.2.1 네 번째 시도 : 추상화 조건으로 필터링
 
 public static List<Apple> filterApples(List<Apple> inventory, ApplePredicate p){ 
  List<Apple> result = new ArrayList<>();
  for(Apple apple: inventory){
    if(p.test(apple)){
      result.add(apple);
    }
  }
  return result;
 }
 
 여기에서 다양한 ApplePredicate를 만들어서 filterApples메서드로 전달할 수 있다. 
 예를들어 150그램이 넘는 빨간사과를 검색해 달라고 부탁을 한다면,
 public class AppleRedAndHeavyPredicate implements ApplePredicate {
  public boolean test(Apple apple){
   return RED.equals(apple.getColor()) && apple.getWeight() > 150;
  }
 }
 
 List<Apple> redHeavyApples = filterApples(invenvtory, new AppleRedAndHeavyPredicate());
 
 위에 예제처럼 가장 중요한 구현은 test메서드다.
 2.3절에서는 ApplePredicate클래스를 정의하지 않고도 "red".equals(apple.getColor()) && apple.getWeight() > 150 와 같은 표현식을 filterApples메서드로 
 전달하는 방법을 찾겠다.
 
 이처럼 컬렉션의 탐색 로직과 각 항목에 적용할 동작을 분리할 수 있다는 것이 동작 파라미터화의 강점이다!
 
2.3 복잡한 과정 간소화
 위의 과정은 번거롭고 시간낭비이다. 로직과 관련 없는 코드들이 많이 필요하다.
 자바는 클래스의 선언과 인스턴스화를 동시에 수행하여 익명 클래스라는 기법을 제공한다. 
 익명 클래스를 통해 코드의 양을 줄일 수 있다. 하지만 이 또한 모든 것을 해결해주지는 않는다.
 
 2.3.1 익명 클래스
 익명 클래스는 자바의 지역클래스와 비슷한 개념이다. 
 말 그대로 이름이 없는 캘래스로 클래스의 선언과 인스턴스화를 동시에 할 수 있다.
 즉, 즉석에서 필요한 구현을 만들어서 사용할 수 있다.
 
 2.3.2 다섯 번째 시도 : 익명 클래스 사용
 ex1)
 List<Apple> redApples = filterApples(inventory, new ApplePredicate(){
  public boolean test(Apple apple){
    return RED.equals(apple.getColor());
  }
 }
 
 ex2) 
 button.setOnAction(new EventHandler<ActionEvent>(){
  public void handle(ActionEvent event){
    System.out.println("Whoooo a click!!");
  }
 });
 
 (-) 익명클래스는 반복되어 지저분한 코드를 만들어내고 공간을 많이 차지한다.
 (-) 많은 프로그래머가 익명 클래스 사용에 익숙 하지 않다.
 코드의 장황함은 나쁜 특성이다. 
 
 2.3.3 여섯 번째 시도 : 람다 표현식 사용
 
 List<Apple> result = filterApples(inventory, (Apple apple) -> RED.equals(apple.getColor()));
 
 2.3.4 일곱 번째 시도 : 리스트 형식으로 추상화
 
 Public interface Predicate<T> {
  boolean test(T t);
 }
 public static<T> List<T> filter(List<T> list, Predicate<T> p){
  List<T> result = new ArrayList<>();
  for(T e:list){
    if(p.test(e)){
      result.add(e);
    }
  }
 }
 
 List<Apple> redApples = filter(inventory, (Apple apple) -> RED.equals(apple.getColor()));
 List<Integer> evenNumbers = filter(numbers, (Integer i) -> i%2 == 0 );
 
 2.4 실전 예제
 동작 파라미터화 패턴은 동작을 캡슐화한 다음에 메서드로 전달해서 메서드로 동작을 파라미터화한다.
 
 2.4.1 Comparator로 정렬하기
 컬렉션 정렬은 반복되는 프로그래밍 작업이다.
 예를 들어, 농부가 처음에는 무게를 기준으로 사과를 정렬하고 싶다고 말하다가 마음을 바꿔 색을 기준으로 정렬하고 싶어할 수도 있다.
 
 자바8의 List에는 sort메서드가 포함되어있다. 
 다음과 같은 인터페이서를 갖는 java.util.Comparator객체를 이용해서 sort의 동작을 파라미터화 할 수 있다.
 
 // java.util.Comparator
 public interface Comparator<T> {
  int compare(T o1, T o2);
 }
 
 inventory.sort(new Comparator<Apple>(){
  public int compare(Apple a1, Apple a2){
    return a1.getWeight().compareTo(a2.getWeight());
  }
 });
 
 람다식을 이용하면 더 간단하다.
 inventory.sort((Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight()));
 

 2.4.2 Runnable로 코드 블록 실행하기
 자바 스레드를 이용하면 병렬로 코드 블록을 실행 할 수 있다.
 
 자바 8이전에는 다음과 같다.
 public interface Runnable {
  void run();
 }
 
 Runnable을 이용하여 다양한 동작을 스레드로 실행할 수 있다.
 Thread t = new Thread(new Runnable(){
  public void run(){
    System.out.println("Hello world");
  }
 }
 
 자바8 부터는 다음과 같다.
 Thread t = new Thread(() ->System.out.println("Hello world!"));
 
 2.4.2 Callable을 결과로 반환하기
 Callable인터페이스를 이용해 결과를 반환하는 테스트를 만든다.
 이 방식은 Runnable의 업그레이드 버전이다.
 public interface Collable<V> {
  V call();
 }
 
 ExecutorService executorService = Executors.newCachedThreadPool();
 Future<String> threadName = executorService.submit(new Callable<String>(){
  @Override public String call() throws Exception {
    return Thread.currentThread().getName();
  }
 });
 
 자바8의 람다버전은 다음과 같다.
 Future<String> threadName = executorService.submit(() -> Thread.currentThread().getName());
 
 2.4.4 GUI 이벤트 처리하기
 Button button = new Button("Send");
 button.setOneAction(new EventHandler<ActionEvent>(){
  public void handle(ActionEvent event){
    label.setText("sent!!");
  }
 });
  
 EventHandler는 setOnAction메서드의 동작을 파라미터화 한다.
 button.setOneAction((ActionEvent event) -> label.setText("Sent"));
 
2.5 마치며
 - 동작 파라미터에서는 메서드 내부적으로 다양한 동작을 수행할 수 있도록 코드를 메서드 인수로 전달한다.
 - 동작 파라미터화를 이용하면 변화하는 요구사항에 더 잘 대응할 수 있으며 엔지니어링 비용을 줄일 수 있다.
 - 코드 전달 기법을 이용하면 동작을 메서드의 인수로 전달할 수 있다.
 
