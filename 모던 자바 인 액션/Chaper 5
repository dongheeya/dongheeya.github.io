Chaper 5. 스트림 활용
 - Collection을 이용한 반복
 List<Dish> vegetarianDishes = new ArratList<>();
 for(Dish d:menu){
  if(d.isVegetarian())
    vegetarianDishes.add(d);
 }
 
 - Stream api
 List<Dish> vegetarianDishes = menu.stream().filter(Dish::isVegetarian).collect(toList());
 
 5.1 필터링
  - 프레디케이스 필터링 방법과 고유 요소만 필터링하는 방법
  
  5.1.1 프레디케이스로 필터링
   - filter 메서도 지원.
   - 프레디케이스를 인수로 받아서 일치하는 모든 요소를 포함하는 스트림을 반환.
   List<Dish> vegetarianMenu = menu.stream().filter(Dish::isVegetarian).collect(toList());
  
  5.1.2 고유 요소 필터링
   - distinct 메서드 지원
   - 중복을 제거한다.
   List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 2, 3);
   number.stream().filter( i -> i%2 == 0).distinct().forEach(System.out::println);
   
  5.2.2 스트림 숙소
   - 주어진 값 이하의 크기를 갖는 새로운 스트림을 반환하는 limit(n) 메서드를 지원
   - 정렬되어 있으면 최대 n개를 반환한다.
   
   ex) 300칼로리 이상의 세 요리 선택해서 리스트를 만들 수 잇다.
   List<Dish> dishes = specialMen.stream().filter( d -> d.getCalories() > 300)
                                 .limit(3).collect(toList());
  
  5.2.3 요소 건너뛰기
   - 처음 n개 요소를 제외한 스트림을 반환하는 skip(n) 메서드를 지원한다.
   - n개 이하의 요소를 포함하는 스트림에 skip(n)을 호풀하면 빈 스트림이 반환된다.
   
   ex) 300칼로리 이상의 처음 두 요래는 건너뛴다.
   List<Dish> dishes = specialMen.stream().filter( d -> d.getCalories() > 300)
                                 .skip(2).collect(toList());
   
 5.3 매핑 
  특정 데이터를 선택하는 작업은 데이터 처리 과정에서 자주 수행되는 연산이다.
   
  5.3.1 스트림의 각 요소에 함수 적용하기
   - 스트림은 함수를 인수로 받는 map 메서드를 지원한다.
   - 인수로 제공된 함수는 각 요소에 적용되며 함수를 적용한 결과가 새로운 요소로 매핑된다.
   
   List<String> dishNames = menu.stream()
                                .map(Dish::getName) <- Stream<String>
                                .collect(toList());
                                
  5.3.2 스트림 평면화
   - 고유 문자로 이루어진 리스트를 반환하자.
    ex) "Hello","World" -> "H","e","l","o","W","r","d"
   - 리스트에 있는 각 단어를 문자로 매핑한 다음에 distinct 중복되면 해결??
   words.stream()
        .map(word -> word.split('')) --> Stream<String[]>
        .distinct()
        .collect(toList());
   
   words.stream()
        .map(word -> word.split('')) 
        .flatMap(Arrays::stream) --> 생성된 스트림을 하나의 스트림으로 평면화
        .distinct()
        .collect(toList());
   
 5.4 검색과 매칭
  - 특정 속성이 데이터 집합에 있는지 여부를 검색하는 데이터 처리도 자주 사용된다.
  - allMatch, anyMatch, noneMatch, findFirst, findAny
  
  5.4.1 프레디케이트가 적어도 한 요소와 일치하는지 확인
   - 프레디케이트가 주어진 스트림에서 적어도 한 요소와 일치하는지 확인할 때 anyMatch 메서드를 이용한다.
   
   if(menu.stream().anyMatch(Dish::isVegetarian)){
    System.out.println("The menu is (somewhat) vegetarian friendly!!");
   } --> anyMatch는 불리언을 반환하므로 최종 연산이다.
  
  5.4.2 프레디케이스가 모든 요소와 일치하는 지 검사
   - allMatch 메서드는 anyMatch와 달리 스트림의 모든 요소가 주어진 프레디케이트와 일치하는지 검사.
   boolean isHealthy = menu.stream().allMatch(dish -> dish.getCalories() < 10000);
   
   nonematch (<-> allMatch 와 반대 연산을 수행)
   즉, noneMatch는 주어진 프레디케이트와 일치하는 요소가 없는지 확인.
   
   * 쇼트서킷 평가 
    ; 쇼트서킷처럼 allMatch, noneMatch, findFirst, findAny 등의 연산은 모든 스트림의 요소를 처리하지 않고도 결과를 반환.
    
  5.4.3 요소 검색
   - findAny 메서드는 현재 스트림에서 임의의 요소를 반환
   Optional<Dish> dish = menu.stream().filter(Dish::getVegetarian).findAny();
   
   * Optional 이란?
   - java.util.Optional는 값의 존재나 부재 여부를 표현하는 컨테이너 클래스이다.
   - 아무런 요소도 반환하지 않을 수 잇다
   - null은 쉽게 에러를 일으키므로 Optional<T>로 null확인 관련 버그를 피할 수 잇도록 하엿다.
   
   - isPresent()는 Optional이 값을 포함하면 true, 값을 포함하지 않으면 false를 반환
   - ifPresent(Consumer<T> block)은 값이 있으면 주어진 블록을 실행
   - T get()은 값이 존재하면 값을 반환, 값이 없으면 NoSuchElementException을 일으킨다.
   - T orElse(T other)는 값이 있으면 값을 반환, 값이 없으면 기본값을 반환
   
   ex) menu.stream().filter(Dish::isVegetarian).findAny().ifPresent(dish -> System.out.println(dish.getName());
   -> 값이 있으면 출력되고, 값이 없으면 아무일도 일어나지 않는다.
   
  5.4.4 첫 번째 요소 찾기
   - findFirst 와 findAny는 언제 사용하나?
    ; 병렬성 때문에 첫번째 요소를 찾기가 힘들다. 따라서 요소의 반환 순서가 상관없다면 명렬 스트림에서는 제약이 적은 findAny를 사용한다.
    
 5.5 리듀싱
  - 최종 연산은 불리언(allMatch), void(forEach)또는 Optional 객체를 반환했다.
  또한, collect로 모든 스트림의 요소를 리스트로 모으는 방법도 찾압봤다.
  
  5.5.1 요소의 합
   - reduce
   int sum = 0 ;
   for(int x:number){ sum+= x;}
   
   위와같은 반복적인 과정세 reduce과정을 녹인다면, 다음과 같다.
   1) sum 변수의 초깃값 0
   2) 리스트의 모든 요소를 조합하는 연산(+)
   
   모든 숫자를 곱하는 연산을 구할수 있다면 좋다.
   reduce를 이용하면 애플리케이션의 반복된 패턴을 추상화 할 수 있다.
   
   int sum = numbers.stream().reduce(0 , (a, b) -> a+b);
   
   메서드 참조를 이용하면 다음과 같다.
   int sum = numbers.stream().reduce(0 , Integer::sum);
   
   초기값 없음.
   초기값이 없는 경우라면, Optional 객체를 반환해야한다. 왜냐하면, 스트림에 아무런 요소가 없는 상황에서 초기값이 없게된다면, reduce합계를 반환할 수 없기
   때문이다.
   
   Optional<Integer> sum = numbers.stream().reduce((a,b) ->a+b);
   
  5.5.2 최댓값 최솟값
   Optional<Integer> sum = numbers.stream().reduce(Integer::max);
   Optional<Integer> sum = numbers.stream().reduce(Integer::min);
 
 
  5.7 숫자형 스트림
   5.7.1 기본형 특화 스트림
    - 스트림은 오직 박싱 과정에서 일어나는 효율성과 관련이 있으며 스트림에 추가 기능을 제공하지 않는다는 사실을 기억하자.
   
    숫자 스트림 매핑
     int calories = menu.stream().mapToInt(Dish::getCalories).sum();
     
   5.7.2 숫자 범위
    - 프로그램에서 툭정 범위의 숫자를 이용하는 상황이 자주 발생
    range와 rangeClosed라는 두가지 정적 메서드를 제공하자.
    첫번째 인수로는 시작값을, 두번째 인수로 종료값을 갖는다.
    
    intStream evenNumbers = IntStream.rangeClosed(1,100).filter(n->n%2 ==0);
   
 5.8 스트림 만들기
  - 스트림이 데이터 처리 질의를 표현하는 강력한 도구임을 충분히 확인했다.
  5.8.1 값으로 스트림 만들기
   - 임의의 수를 인수로 받는 정적 메서드 Stream.of를 이용해서 스트림을 만들 수 있다.
   Stream.of로 문자열 스트림을 만드는 예제이다.
   Stream의 모든 문자열을 대문자로 반환한 후 문자열을 하나씩 출력한다.
   
   ex) Stream<String> stream = Stream.of("Moderm ","Java ","In ","Action ");
   stream.map(String::toUpperCase).forEach(System.out::println);
   그리고 스트림을 비울수 잇다.
   Stream<String> emptyStream = Stream.empty();
  
  5.8.2 null이 될 수 있는 객체로 스트림 만들기
   ex) String homeValue = System.getProperty("home");
   Stream<String> homeValuestream = homeValue == null ? Stream.empty() : Stream.of(value);
   
   
마치며.
 - Stream api를 이용하면 복잡한 데이터 처리 질의를 표현할 수 있다.
 - filter, distinct, takeWhile, dropWhile, skip, limit 메서드로 스트림을 필터링하거나 자를 수 있다.
 - 소스가 정렬되어 있다는 사실을 알고 있을 때 takeWhilerhk dropWhile메서드를 효과적으로 사용할 수 있다.
 - map, flattMap메서드로 스트림의 요소를 추출하거나 ㅕㄴ환할 수 있다.
 - firstFind, findAny 메서드로 스트림의 요소를 검색 할 수 있다.
 - allMath, noneMatch, anyMatch메서드를 이용하면 주어진 프레디케이트와 일치하는 요소를 스트림에서 검색할 수 있다.
 - reduce 메서드로 스트림의 모든 요소를 반복 조합하며 값을 도출할 수 있다.
 - filter, map등은 상태를 저장하지 않는 상태 없는 연산이다.
 - iterate와 generate 같은 메서드로 스트림을 만들 수 있다.
 - 무한한 개수와 요소를 가진 스트림을 무한 스트림이라고 한다.
 
