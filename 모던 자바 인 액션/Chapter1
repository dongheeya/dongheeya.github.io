Chapter 1. 자바 8, 9, 10, 11 : 무슨 일이 일어나고 있는가?

1.1 역사의 흐름은 무엇인가? 
 - 자바는 병렬 실행 환경을 쉽게 관리하고 에러가 덜 발생하는 방향으로 진행하려고 노력
 - 자바 8에서는 새로운 기술을 지원하여 간결한 코드, 멀티코어 프로세스의 쉬운 활용이란느 두가지 요구사항 기반으로 한다.
   - 스트림 API
   - 메서드에 코드를 전달하는 기법
   - 인터페이스의 디폴트 메서드

1.2 왜 아직도 자바는 변화하는가?
 1.2.1 프로그래밍 언어 생태계에서 자바의 위치
  자바는 처음부터 스레드와 락을 이용한 소소한 동시성도 지원
  소프트웨어 엔지니어링적인 문제가 적음
  객체지향의 정신적인 모델 덕분에 프로그래밍 모델에 쉽게 대응
  자바 8은 더 다양한 프로그래밍 도구 그리고 다양한 프로그래밍 문제를 더 빠르고 정화하며 쉽게 유지보수할 수 있다는 장점을 제공
  새로운 멀티코어 병렬성이 강화

 1.2.2 스트림 처리
  - 스트림 처리(Stream processing) 한 번에 한 개씩 만들어지는 연속적인 데이터 항목들의 모임
  이론적으로 프로그램은 입력 스트림에서 데이터를 한개씩 읽어 들이며 마찬가지로 출력 스트림으로 데이터를 한 개씩 기록
  즉, 어떤 프로그램의 출력 스트림은 다른 프로그램의 입력 스트림이 될 수 있다.
  
  ex) cat file1 file2 | tr "[A-Z]" "[a-z]" | sort | tail -3 
  파일의 단어를 소문자로 바꾼 다음에 사전순으로 단어를 정렬했을때 가장 마지막에 위치한 세 단어를 출력하는 프로그램
  
  자바8에는 java.util.stream 패키지에 스트림 API가 추가. 
  Stream<T>는 T형식으로 구성된 일련의 항목을 의미
  스트림 API는 파이프라인을 만드는 데 필요한 많은 메서드를 제공
  
  한 번에 한 항목을 처리햇지만 이제 자바 8에서는 우리가 하려는 작업을 고수준으로 추상화해서 일련의 스트림으로 만들어 처리할 후 있다.
  
1.2.3 동작 파라미터화로 메서드에 코드 전달하기
 동작 파라미터화는 코드의 일부를 API로 전달하는 기능을 말한다.
 compareUsingCustomerId를 이용해 sort의 동작을 파라미터화햇던 것처럼 스트림API는 연산의 동작을 파라미터화할 수 있는 코드를 전달함을 기초함.
 
1.2.4 병렬성과 고유 가변 데이터
 '병렬성을 공짜로 얻을 수 있다' 그리고 이를 위해서는 '스트림 메서드로 전달하는 코드의 동작 방식으로 바꿔야한다.'
 스트림 메서드로 전달하는 코드는 다름 코드와 동시에 실행하더라도 안전하게 실행될 수 있어야하며, 다른 코드와 동시에 실행하더라도 안전하게 실행
 할 수 있는 코드를 만들려면 공유된 가변데이터에 접근하면 안된다.
 -> pure함수, side-effect-free함수, stateless함수 라고 불린다.

1.2.5 자바가 진화해야하는 이유
 하드웨어나 프로그래머 기대의 변화에 부응하는 방향으로 변하ㅗ해야한다.
 
1.3 자바 함수
 함수(function) ; 메서드(method) 특히 정적 메서드와 같은 의미로 사용. 
 프로그래밍 언어의 핵심은 값을 바꾸는 것이다.

1.3.1 메서드와 람다를 일급 시민으로
 * 메서드 참조(method reference) 
 
 ex) 주어진 파일이 숨겨진 파일이 있는지 여부를 구현하자.
  File[] hiddenFiles = new File(".").listFiles(new FileFilter(){
    public boolean accept(File file) {
      return file.isHidden();
    }}});
  ==> File[] hiddenFiles = new File(".").listFiles(File::isHidden);
  
  File::isHidden -> 이 부분이 메소드 참조임
  
  람다 : 익명 함수 ; 익명함수를 포함하여 함수도 값으로 취급할 수 있다.
  ex) x라는 인수로 호출하면 x+1을 반환
  (int x) -> x+1 
  
1.3.2 코드 넘겨주기 : 예제
  ex) Apple클래스와 getColor메서드가 있고, Apples리스트를 포함하는 변수 inventory가 있을때, 모든 녹색 사과를 반환하라.
  public static List<Apple> filterGreenApples(List<Apple> inventory) {
    List<Apple> result = new ArrayList<>();
    for (Apple apple : inventory) {
      if ("green".equals(apple.getColor())) { <-- 이때, 사과의 무게를 150g으로 필터랑 하고싶다면, if(apple.getWeight() > 150) 으로 작성할 것이다.
        result.add(apple);
      }
    }
    return result;
  }

  이렇게 복붙으로 비슷한 메서드에 대하여 여러개를 만들기보다는 필터랑하는 것을 인수로 넘겨주면 될것이다.
  , java8에 맞게 구현한다면 다음과 같다.
  
  public static boolean isGreenApple(Apple apple) {
    return "green".equals(apple.getColor());
  }

  public static boolean isHeavyApple(Apple apple) {
    return apple.getWeight() > 150;
  }
  
  public interface Predicate<T> { boolean Test(T t); }
  
  static List<Apple> fileterApples(List<Apple> inventory, Predicate<Apple> p){
   List<Apple> result = new ArrayList<>();
   for(Apple apple:inventory){
    if(p.test(apple){ result.add(apple);}
   }
  }
 
  filterApples(inventory, Apple::isGreenApple);
  filterApples(inventory, Apple::isHeavyApple);
 

1.3.3 메서드 전달에서 람다로
 위에 method를 람다로 변환한다면 다음과 같다.
 filterApples(inventory, (Apple a) -> Green.equals(a.getColor()));
 filterApples(inventory, (Apple a) -> a.getWeight() > 150 );
 
 * 하지만 람다식이 몇 줄 이상으로 길어지고 복잡해 진다면, 차라리 일을 잘 설명하는 이름을 가지는 메서드를 정의하고 그 메서드를
 참조를 활용하는 것이 바랍직하다. 코드의 명확성이 우선이 되어야한다.
 
1.4 스트림
 ex) 리스트에서 고가의 트랜잭션(거래)만 필터링한 다음에 통화로 결과를 그룹화해야된다면?
 
 Map<Currency, List<Transaction>> transactionBuCurrencies = new HashMap<>();
 for(Transaction transaction: transactions){
  if(transaction.getPrice() > 1000){
   Currency currency = trancaction.getCurrency();
   List<Transaction> transactionForCurrency = transactionByCurrencies.get(currency);
   if(transactionForCurrency == null){
    transactionForCurrency = new ArrayList<>();
    transactionByCurencies.put(currency, transactionForCurrency);
   }
   transactionForCurrency.add(transaction);
  } 
 }
 
-> 스트림 api사용시에는
 Map<Currency, List<Transaction>> transactionBuCurrencies = new HashMap<>();
 transactionBuCurrencies = transactions.stream().filter((Transaction t)-> t.getPrice() > 1000) <- 고가의 트랜잭션 필터링  
  .collect(groupingBy(Transaction::getCurrency));  <- 통화로 그룹핑

1.4.1 멀티스레딩은 어렵다.
 자바버전에서 제공하는 스레드 api로는 멀티스레딩 코드를 구현해서 병렬성을 이용하는 것은 쉬비 않다.
 하지만, 자바8은 스트림 API를 사용하여 '컬렉션을 처리하면서 발생하는 모호함과 반복적인 코드 문제' 그리고 '멀티코어 활용 어려움'이라는 문제를 해결한다.
 즉, 반복되는 패턴으로 주어진 조건에 따라 데이터를 [필터링]하거나, 데이터를 [추출]하거나 데이터를 그룹화하는 등의 기능이 있음.
 
 * 스트림은 스트림 내의 요서를 쉽게 병렬로 처리할 수 있는 환경을 제공
 컬렉션을 스트림으로 변경 + 병렬처리 + 리스트로 다시 복원하는 것!
 
 ex) 순차처리 방식
 List<Apple> heavyApples = inventory.stream().filter((Apple a) -> (a.getWeight() > 150 ).collect(toList());
 
 ex) 병렬처리 방식
 List<Apple> heavyApples = inventory.parallelStream().filter((Apple a) -> (a.getWeight() > 150 ).collect(toList());
 
1.5 디폴터 메서드와 자바 모듈
 자바의 변화 과정에서 가장 어려움을 겪는 하나는 기존 인터페이스의 변경이다. 그리고 인터페이스를 업데이트하면 해당 인터페이스를 구현하는 모든 클래스를 
 변경해야하므로 사실상 불가능에 가까웠다. 이를 default Method로 해결한다. -> 13장 참조
 
 ex) List<Apple> heavyApples1 = inventory.stream().filter((Apple a) -> a.getWeight() > 150 )
                                         .collect(toList());
List<Apple> heavyApples2 = inventory.parallelStream().filter((Apple a) -> a.getWeight() > 150 )
                                         .collect(toList()); 
 자바8이전에는 list<T>가 stream이나 parallelStream 메서드를 지원하지 않는다는 것이 문제이다.
 
 자바8dms 구현 클래스에서 구현하지 않아도 되는 메서드를 인터페이스에 추가할 수 있는 기능을 제공한다.
 이런 디폴트 메서드를 이용하면 기존의 코드를 건들이지 않고도 원래의 인터페이스 설계를 자유롭게 확장이 가능하다.
 
 
1.6 함수형 프로그래밍에서 가져온 다른 유용한 아이디어
 명시적으로 서술형의 데이터 형식을 이용해 null을 회피하는 깁버이있다. 
 자바 8에서는 NullPointer예외를 피할 수 있도록 도와주는 Optional<T>클래스를 제공한다.
 Optional<T>는 값을 갖거나 갖지 않을 수 있는 컨테이너 객체이다. 
 Optional<T>는 값이 없는 상황을 어떻게 처리할지 명시적으로 구현하는 메서드를 포함하고 있다.
 이를 이용하면 NullPointer예외를 피할 수 있다. -> 11장 참조
 
1.7 마치며
 - 언어 생태계에서 모든 언어는 변화해서 살아남거나 그대로 머물면서 사라진다.
 - 자바8은 더 효과적이고 간결하게 구현할 수 잇는 새로운 개념과 기능을 제공한다.
 - 기존 자바 프로그래밍 기법으로는 멀티코어 프로세서를 온전히 활용할 수 없다.
 - 익명 함수(람다)를 어떻게 구현하는지 기억하자.
 - 자바8의 스트림 개념 중 일부는 컬렉션에서 가져온 것이다.
 - 스트림과 컬렉션을 적적하게 활용하면 스트림의 인수를 병렬로 처리할 수 있음 더 가독성이 좋은 코드를 구현할 수 있다.
 - 자바9에서는 모듈을 이용해 시스템의 구조를 만들 수 있고 디폴트 메소드를 이용해 기존 인터페이스를 구현하는 클래스를 바꾸지 않고 인터페이스를 변경하다.
 - 함수형 프로그래밍에서 null처리 방법과 패턴 매칭 활동 등 흥미로운 기법을 발견했다.
 

 
 
 
 
 
 






















