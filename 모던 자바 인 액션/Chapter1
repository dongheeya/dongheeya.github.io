Chapter 1. 자바 8, 9, 10, 11 : 무슨 일이 일어나고 있는가?

1.1 역사의 흐름은 무엇인가? 
 - 자바는 병렬 실행 환경을 쉽게 관리하고 에러가 덜 발생하는 방향으로 진행하려고 노력
 - 자바 8에서는 새로운 기술을 지원하여 간결한 코드, 멀티코어 프로세스의 쉬운 활용이란느 두가지 요구사항 기반으로 한다.
   - 스트림 API
   - 메서드에 코드를 전달하는 기법
   - 인터페이스의 디폴트 메서드

1.2 왜 아직도 자바는 변화하는가?
 1.2.1 프로그래밍 언어 생태계에서 자바의 위치
  자바는 처음부터 스레드와 락을 이용한 소소한 동시성도 지원
  소프트웨어 엔지니어링적인 문제가 적음
  객체지향의 정신적인 모델 덕분에 프로그래밍 모델에 쉽게 대응
  자바 8은 더 다양한 프로그래밍 도구 그리고 다양한 프로그래밍 문제를 더 빠르고 정화하며 쉽게 유지보수할 수 있다는 장점을 제공
  새로운 멀티코어 병렬성이 강화

 1.2.2 스트림 처리
  - 스트림 처리(Stream processing) 한 번에 한 개씩 만들어지는 연속적인 데이터 항목들의 모임
  이론적으로 프로그램은 입력 스트림에서 데이터를 한개씩 읽어 들이며 마찬가지로 출력 스트림으로 데이터를 한 개씩 기록
  즉, 어떤 프로그램의 출력 스트림은 다른 프로그램의 입력 스트림이 될 수 있다.
  
  ex) cat file1 file2 | tr "[A-Z]" "[a-z]" | sort | tail -3 
  파일의 단어를 소문자로 바꾼 다음에 사전순으로 단어를 정렬했을때 가장 마지막에 위치한 세 단어를 출력하는 프로그램
  
  자바8에는 java.util.stream 패키지에 스트림 API가 추가. 
  Stream<T>는 T형식으로 구성된 일련의 항목을 의미
  스트림 API는 파이프라인을 만드는 데 필요한 많은 메서드를 제공
  
  한 번에 한 항목을 처리햇지만 이제 자바 8에서는 우리가 하려는 작업을 고수준으로 추상화해서 일련의 스트림으로 만들어 처리할 후 있다.
  
1.2.3 동작 파라미터화로 메서드에 코드 전달하기
 동작 파라미터화는 코드의 일부를 API로 전달하는 기능을 말한다.
 compareUsingCustomerId를 이용해 sort의 동작을 파라미터화햇던 것처럼 스트림API는 연산의 동작을 파라미터화할 수 있는 코드를 전달함을 기초함.
 
1.2.4 병렬성과 고유 가변 데이터
 '병렬성을 공짜로 얻을 수 있다' 그리고 이를 위해서는 '스트림 메서드로 전달하는 코드의 동작 방식으로 바꿔야한다.'
 스트림 메서드로 전달하는 코드는 다름 코드와 동시에 실행하더라도 안전하게 실행될 수 있어야하며, 다른 코드와 동시에 실행하더라도 안전하게 실행
 할 수 있는 코드를 만들려면 공유된 가변데이터에 접근하면 안된다.
 -> pure함수, side-effect-free함수, stateless함수 라고 불린다.

1.2.5 자바가 진화해야하는 이유
 하드웨어나 프로그래머 기대의 변화에 부응하는 방향으로 변하ㅗ해야한다.
 
1.3 자바 함수
 함수(function) ; 메서드(method) 특히 정적 메서드와 같은 의미로 사용. 
 프로그래밍 언어의 핵심은 값을 바꾸는 것이다.

1.3.1 메서드와 람다를 일급 시민으로
 * 메서드 참조(method reference) 
 
 ex) 주어진 파일이 숨겨진 파일이 있는지 여부를 구현하자.
  File[] hiddenFiles = new File(".").listFiles(new FileFilter(){
    public boolean accept(File file) {
      return file.isHidden();
    }}});
  ==> File[] hiddenFiles = new File(".").listFiles(File::isHidden);
  
  File::isHidden -> 이 부분이 메소드 참조임
  
  람다 : 익명 함수 ; 익명함수를 포함하여 함수도 값으로 취급할 수 있다.
  ex) x라는 인수로 호출하면 x+1을 반환
  (int x) -> x+1 
  
1.3.2 코드 넘겨주기 : 예제
  
  
 
 
























