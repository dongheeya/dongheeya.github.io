5.1 인덱싱 소개
 - 데이터베이스는 전체 내용을 살펴보는 대신 지름길을 택해, 특정 내용을 가리키는 정렬된 리스트 확인
 - 엄청난 양의 명령을 더 빠르게 쿼리 가능.
 
 - 인덱스 사용하지 않는 쿼리 = 컬렉션 스캔(Collection scan)
 
 * Explain 함수 : 쿼리가 실행될 때 몽고 DB가 무엇을 하는지 확인 
  -> executionStats 모드는 인덱스를 이용한 쿼리의 효과를 이해하는데 도움

 > db.users.find({"username":"user101"}).explain("executionStats")
 ...........
 "executionStats" : {
  .........
  "totalDocsExaimed" : 100000 -> 퀴리를 실행하면서 살펴본 도큐먼트의 개수 
  "nReturned" : 1 -> 반환받은 결과의 개수 
  "executionTimeMillis" 

5.1.1 인덱스 생성
 * createIndex 
 > db.users.createIndex({"username":1}) ; usernames으로 오름차순으로 인덱스를 생성 
 
 단점) 인덱싱된 필드를 변경하는 쓰기 작업은 더 오래걸린다. 데이터가 변경될 때마다 도큐먼트뿐 아니라 모든 인덱스를 갱신이 필요.
  따라서 신중한 인덱스 생성이 필요
  
5.1.2 복합 인덱스 소개 : 2개 이상의 키를 기반으로한 인덱스
 단, 인덱스가 앞부분에 놓일 때만 정렬에 도움
 
 > db.users.find().sort({"age":1,"username":1}) ; age 먼저 정렬 한 후에 username을 정렬
 > db.users.createIndex({"age":1,"username":1}) ; 내부에서 스토리지 엔진에 의해 사용되며 도큐먼트 데이터를 찾는다.
 
 * 동등 쿼리 (= 단일 값을 찾음)
 ex) db.users.find({"age":21}).sort({"username":-1}) ; age = 21일과 일치하는 마지막 항목부터 순서대로 인덱스를 탐색 
 
 * 범위 쿼리 (= 여러값이 일치하는 도큐먼트를 찾아낸다)
 ex) db.users.find({"age":{"$gte":21, "$lte":30}}) ; 인덱스 순서에 따라 결과 반환
 ex) db.users.find({"age":{"$gte":21, "$lte":30}}).sort({"username":1}) ; 정렬을 포함한 경우에는 검색조건에 맞는 인덱스를 사용한다.
 즉, 결과를 추출 -> 결과 반환전에 메모리에서 정렬해야함
 
 #이때 결과가 32메가 바이트 이상이면 몽고 db에서 데이터가 너무 많아 정렬을 거부함.
 
 따라서, 복합 인덱스를 사용할떄에는 sort하려는 것을 앞에 두는것이 좋다. 그러면 인메모리 정렬이 필요하지 않음.
 
5.1.3 몽고db가 인덱스를 선택하는 방법
 step1. 몽고 db는 각 인덱스 후보에 하나씩 쿼리 플랜을 생성
 step2. 각 다른 인덱스를 사용하여 병렬 스레드에서 실행
 step3. 어떤 스레드에서 가장 빠른 결과를 반환하는지 확인 
 step4. 가정 먼저 목표에 도달하는 쿼리가 승자가 되어 인덱스로 선택
 step5. 승리한 인덱스는 차후 모양이 같은 쿼리에 사용하기 위해 캐시에 저장
 step6. 변경이 있을시에 캐시에서 삭제되며 쿼리 플랜 캐시는 명시적으로 지울수 있음. mogod프로세스를 다시 시작할때에도 삭제.
 
5.1.4 복합 인덱스 사용 ( 단일키 인덱스보다 좀더 복잡 & 강력) * 동등필터 < 정렬 < 다중필터
 > db.students.createIndex({"class_id":1})
 > db.students.createIndex({"student_id" :1, "class_id":1})
 > db.students.find({"student_id" :{"$gt":500000}, "class_id":54}).sort("student_id":1}).explain("executionStats")
  ; ID가 5000000보다 큰 모든 레코드에서 검색ID가 54인 클래스에 대한 레코드로 제한 & student_id기준으로 오름차순
  -> 이때 "stage" : "FETCH"가 되면 인덱스를 탄것. <-> "SORT"이라면 인메모리 정렬을 함
  ; 해당 쿼리는 선정된 결과를 사용하기 위해 먼저 전체 도큐먼트를 반환한후 정렬해야하였음.
  
  따라서 hint 메서드를 사용하여 모양이나 이름을 지정하여 사용할 인덱스를 지정
 > db.students.find({"student_id" :{"$gt":500000}, "class_id":54}).sort("student_id":1}).hint({class_id:1}).explain("executionStats")
  
  하지만, hint 메서드의 사용없이 totalKeyExamined와 nReturned를 유사하게 가져가는것이 효율적!
 > db.students.createIndex({"class_id":1, "student_id" :1}) 
 * 일반적으로 동등 필터를 사용할 필드가 다중값 필터를 사용하는 필드보다 앞에 오도록 설계*
 * 정렬 구성 요소는 동등필터 뒤 다중필터 앞에 위치해야 인메모리를 이용한 정렬 피할수 있음*
  
 - 복합 정렬 : 키 방향 선택하기 (서로 다른 방향으로 최적화)
 ex) {"age":1, "username":-1}
  
 
 
 
 
 
  
