4.1 find
 - find 함수는 쿼리에 사용
 - 빈 쿼리 도큐먼트 ( = {} ) 는 컬렉션 내 모든 것과 일치
  > db.c.find()
  
 - 여러 키/값 상을 추가해 검색을 제한
 - 정수은 정수형에, 불리언은 불리언에, 문자열은 문자열에 일치
  > db.users.find({"username":"joe","age":"27})
  
4.1.1 반환받을 키 지정 
 - 반환받을 도큐먼트 내 키/값 정보가 모두 필요 X
  -> find함수의 두번째 매개변수 이용
  > db.users.find({},{"username":1,"email":1})
  
 - 특정 키/값 쌍을 제외한 결과를 얻을 수도 있음.
  > db.users.find({}, {"fetal_weakness":0})
 - _id 반환 x
  > db.users.find({},{"username":1,"_id":0})

4.1.2 제약 사항
 - 쿼리 도큐먼트 값은 반드시 상수여야함
 
4.2 쿼리 조건
4.2.1 쿼리 조건절
 - </<=,>,>= 비교연산자 "$lt","$lte","$gt","$gte"
  > db.users.find({"age": {"$gte":18,"$lte":30}}) ; age의 도큐먼트의 값을 한정 ( >=18/<=30)
  
  > start = new Date("01/01/2007")
  > db.users.find({"registered" : {"$lt":start}})
 
 - 같지 않음 ($ne) ; 모든 데이터 형에서 사용가능
  > db.users.find({"username":{"$ne": "joe"}})
  
4.2.2 or쿼리
 - $in /$or
 - $in ; 하나의 키에 일치시킬 값이 여러개 있는 경우 사용.
  >  db.raffle.find({"ticket_no": { "$in" : [725,542,390] }})
  >  db.users.find({"user_id": {"$in": [ 12345,"joe"]}})
 - $nin <-> $in
  >  db.raffle.find({"ticket_no": { "$nin" : [725,542,390] }}) ; 해당 번호를 가지고 있지 않는 것들이 나옴
  
 - $or ; 서로 다른 도큐먼트에 대한 조건들을 나열하고 싶을 때 사용.
  >  db.raffle.find({"$or" : ["ticket_no": "725", {"winner":true} ]})
  
  -> * 쿼리 옵티마이저는 $in 을 더 효율적으로 다룸

4.2.3 $not
 - $not은 메타 조건절이며, 어떤 조건에도 적용할 수 있다.
 - 정규식 표현과 함께 주어진 패턴과 일치하지 않는 도큐먼트를 찾을때 유용.
  > db.users.find({"id_num" : { "$not": {"$mod" : [5,1] }}})
  
4.3 형 특정 쿼리
4.3.1 null 
 - null은 스스로와 일치하는 것을 찾는다.
  > db.c.find({"y":null})
 - null은 존재하지 않음과도 일치
  > db.c.find({"z":null})
 -값이 null인 키만 찾고 싶으면 키가 null인 값을 쿼리하고, $exists 조건절을 사용해 null존재여부를 확인하면된다.
 
4.3.2 정규 표현식
 $ regex 는 쿼리에서 패턴 일치 문자열을 위한 정규식 기능 제공
 ex) 이름이 Joe나 joe인 사용자를 모두 찾으려면 정규 표현식을 이용하여 대소문자 구분없이 찾는다.
  > db.users.find({"name":{"$regex":/joe/i}})
  
  
4.3.3 배열에 쿼리하기
 - $all : 2개 이상의 배열요소가 일치하는 배열을 찾을때 사용.
 > db.food.find({ fruit : {"$all" : ["apple","banana"] }})
  - 전체 배열과 정확하게 일치하는 도큐먼트를 쿼리할 수 있음.
  - 순서는 상관 X
 - $size : 특정 크기의 배열을 조회, 크기의 범위로 쿼리 가능
 > db.food.find({"fruit": { "$size": 3}})
 
 - $slice : find의 두번째 매개변수에는 반환받을 특정키를 지정
 ex) 게시물에서 먼저 달린 댓글 열개를 반환 
 > db.blogs.posts.findOne(criteria, {"comments" : {"$slice": 10 }})
 ex) 게시물에 늦게 달린 댓글 열개 반환
 > db.blogs.posts.findOne(criteria, {"comments" : {"$slice": -10 }})
 ex) 게시물에 10번째와 23번째 달린 요소를 반환 
 > db.blogs.posts.findOne(criteria, {"comments" : {"$slice": [23,10] }})
 
 일치하는 배열 요소의 반환
 - $연산자를 사용하여 일치ㅏ는 요소를 반환
 > db.blog.posts.find( {"comments.name" :"bob"}, {"coments.$" : 1})
 - 각 도큐먼트에서 첫 번째로 일치하는 댓글만 반환함
 
 배열 및 범위 쿼리의 상호작용
 - 도큐먼트 내 스칼라는 쿼리 기준의 각 절과 일치해야한다.
 > db.test.find({"x" : {"$gt":10, "$lt" : 20 }})
  ; { "x" : [5,25] } 는 둘중 하나의 조건에만 포함되어도 결과에 나온다는 이슈가 생김
 > db.test.find({"x" : {"$gt":10, "$lt" : 20 }}).min({"x":10}).max({"x":20})
  ; 배열을 포함하는 도큐먼트에 범위 쿼리를 할때 min함수와 max함수를 사용하면 좋음

4.3.4 내장 도큐먼트에 쿼리하기
 * 가능하다면 특정 키로 쿼리하는 방법이 좋다. (.) 표기법을 사용
 > db.people.find({"name.first":"Joe","name.last":"Schmoe"})
 
4.4 $where 쿼리
  - 키/쌍만으로만은 정확하게 표현안될때 사용 
  - $where절을 사용해 임의의 자바스크립트를 쿼리 일부분으로 실행하면, 거의 대부분의 쿼리를 표기할 수 있음.
  - 따라서 보안상의 이유로 사용을 제한해야함.
  
  -$where 절은 도큐먼트 내 두 키의 값을 비교하는 쿼리에서 가장 자주 쓰임
  > db.foo.find({"$where": function () {
    for (var current in this){
      for (var other in this){
        if (current != other %% this[current] == this[other]){
          return true;
        }
      }
    }
  
  }
  return false;
  }});
  
4.5 커서 
 - 데이터베이서는 커서를 사용해 find결과를 반환
  > cursor.hasNext()

4.5.1 제한, 건너뛰기, 정렬
 - $limit :  결과 개수를 제한
 ex) 3개의 결과만 반환
  > db.c.find().limimt(3)
  ; 만약에 컬렉션에 조건에 맞는 결과가 3개 보다 작으면, 조건에 맞는 도큐먼트 개수만큼만 반환.
  
 - $skip : 조건에 맞는 결과중에 처릉ㅁ 3개를 건너뛴 나머지를 반환
  > db.c.find().skip(3)
  ; 따라서, 컬렉션에 맞는 결과가 3개보다 작으면 아무런 결과를 가지고 오지 않음.
  
 - $sort : 객체를 매개변수로 받는다.
  ; 정렬 방향은 1 (오름차순),-1 (내림차순)
  > db.c.find().sort({"username":1 , "age":-1})
  
  * skip으로 너무 많은 수를 넘기게 된다면, 비효율적이므로 사용 권장X
  
4.5.3 종료되지 않는 커서
 - 커서에는 두가지 측면 존재
 - 클라이언트가 보는 커서/ 서버측 커서
 - 서버측에서 보는 커서는 메모리와 리소스 점유 
 - 서버 커서를 종료하는 조건 
   - 커서는 조건에 일치하는 결과를 모두 살펴본 후에는 스스로 정리
   - 커서가 클라이언트 영역에서 벗어나면 드라이버는 데이터베이스에 메세지를 보내 커서를 종료
   - 타임아웃에 의한 종료 
