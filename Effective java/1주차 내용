2장 객체 생성과 파괴

아이템 1. 생성자 대신 정적 팩터리 메서드를 고려하라
아이템 2. 생성자에 매개변수가 많다면 빌더를 고려하라
아이템 3. private 생성자나 열거 타입으로 싱글턴임을 보증하라
아이템 4. 인스턴스화를 막으려거든 private 생성자를 사용하라
아이템 5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라
아이템 6. 불필요한 객체 생성을 피하라
아이템 7. 다 쓴 객체 참조를 해제하라
아이템 8. finalizer와 cleaner 사용을 피하라
아이템 9. try-finally보다는 try-with-resources를 사용하라

3장 모든 객체의 공통 메서드

아이템 10. equals는 일반 규약을 지켜 재정의하라
-----------------------------------------------------------------

아이템 1. 생성자 대신 정적 팩터리 메서드를 고려하라
 - 클래스는 생성자와 별도로 정적 팩터리 메소드(static factory method)를 제공할 수 있다.
 
 * 장점
  - 장점 1) 이름을 가질 수 있다. ; 이름으로 반환할 객체의 특성을 쉽게 묘사 가능
    ex) BigInterger(int, int, Random) < BigInteger.probablePrime (값이 소수인 BigInteger을 반환한다는 의미가 더 잘 설명됨)
  - 장점 2) 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.
    불변 클래스(객체가 가지는 값마다 새로운 인스턴스가 필요) 같은 경우 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하고 있다.
 
