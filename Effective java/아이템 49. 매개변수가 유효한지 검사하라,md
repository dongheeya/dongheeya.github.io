<h1>아이템 49. 매개변수가 유효한지 검사하라</h1>

메서드와 생성자 대부분은 입력 매개변수의 값이 특정 조건을 만족하기를 바란다. <br/>
예컨대 인덱스 값은 음수이면 안 되며, 객체 참조는 null이 아니어야 한다는 식이다.<br/>
이런 제약은 반드시 문서화해야 하며 메서드 몸체가 시작되기 전에 검사해야 한다.<br/>

메서드 몸체가 실행되기 전에 매개변수를 확인한다면 잘못된 값이 넘어왔을 때 즉각적이고 깔끔한 방식으로 예외를 던질 수 있다.<br/>

매개변수 검사를 제대로 하지 못하면 몇 가지 문제가 생길 수 있다.<br/>
첫 번째, 메서드가 수행되는 중간에 모호한 예외를 던지며 실패할 수 있다.<br/>
 - 더 나쁜 상황은 메서드가 잘 수행되다가 중간에 잘못된 결과를 반환할 때다. <br/>
 매개변수 검사에 실패하면 실패 원자성을 어기는 결과를 낳을 수 있다.<br/>
두 번째, public과 protected 메서드는 매개변수 값이 잘못됐을 때 던지는 예외를 문서화해야 한다.<br/>
 - 보통은 IllegalArgumentException, IndexOutOfBoundsException, NullPointerException 중 하나가 될 것이다.<br/>
 매개변수의 제약을 문서화한다면 그 제약을 어겼을 때 발생하는 예외도 함께 기술해야 한다.<br/>
 이런 간단한 방법으로 API 사용자가 제약을 지킬 가능성을 크게 높일 수 있다.<br/>
 
```
/**
* Returns a BigInteger whose value is {@code (this mod m}).  This method
* differs from {@code remainder} in that it always returns a
* <i>non-negative</i> BigInteger.
*
* @param  m the modulus.
* @return {@code this mod m}
* @throws ArithmeticException {@code m} &le; 0
* @see    #remainder
*/
public BigInteger mod(BigInteger m) {
    if (m.signum <= 0)
        throw new ArithmeticException("BigInteger: modulus not positive");

    BigInteger result = this.remainder(m);
    return (result.signum >= 0 ? result : result.add(m));
}
```

위 코드에 m 이 null일 경우 m.signum() 호출 때 NullPointerException 이 발생하는데, 이는 위 메서드 설명에 없다. <br/>
이 에러는 해당 클래스의 모든 public 메서드에 해당하므로 클래스 수준 주석으로 보고, 클래스 수준에서 기술한다.<br/>

@Nullable이나 이와 비슷한 애너테이션을 사용해 특정 매개변수는 null이 될 수 있다고 알려줄 수도 있지만, 표준적인 방법은 아니다.<br/>

자바 7에서 추가된 java.util.Objects.requireNonNull 메서드는 유연하고 사용하기도 편하니, 더 이상 null 검사를 수동으로 하지 않아도 된다.<br/>
원하는 예외 메세지도 지정할 수 있다. 또한 입력을 그대로 반환하므로 값을 사용하는 동시에 null 검사를 수행할 수 있다.<br/>

```
this.strategy = Objects.requreNonNull(strategy, "전략");
```

반환값은 그냥 무시하고 필요한 곳 어디서나 순수한 null 검사 목적으로 사용해도 된다.<br/>

공개되지 않은 메서드라면 패키지 제작자인 여러분이 메서드가 호출되는 상황을 통제할 수 있다.<br/>
따라서 오직 유효한 값만이 메서드에 넘겨지리라는 것을 여러분이 보증할 수 있고, 그렇게 해야 한다.<br/>
다시 말해 public 이 아닌 메서드라면 단언문(assert)을 사용해 매개변수 유효성을 검증할 수 있다.<br/>

```
private static void sort(long a[], int offset, int length) {
  assert a!= null;
  assert offset >= 0 && offset <= a.length;
  assert length >= 0 && length <= a.length - offset;

  ... // 계산 수행
}
```

단언문들은 자신이 단언한 조건이 무조건 참이라고 선언한다는 것이다.<br/>
이 메서드가 포함된 패키지를 클라이언트가 어떤 식으로 지지고복든 상관없다.<br/>
단언문은 몇 가지 면에서 일반적인 유효성 검사와 다르다.<br/>

1. 실패하면 AssertionError를 던진다<br/>
2. 런타임에 아무런 효과도, 아무런 성능 저하도 없다.<br/>
3. 암묵적 유효성 검사에 너무 의존했다가는 실패 원자성을 해칠 수 있으니 주의하자.<br/>

메서드가 직접 사용하지는 않으나 나중에 쓰기 위해 저장하는 매개변수는 특히 더 신경 써서 검사해야 한다.<br/>

생성자는 자웅에 쓰려고 저장하는 매개변수의 유효성을 검사하라는 원칙의 특수한 사례다.<br/>
생성자 매개변수의 유효성 검사는 클래스 불변식을 어기는 객체가 만들어지지 않게 하는 데 꼭 필요하다.<br/>

메서드 몸체 실행 전에 매개변수 유효성을 검사해야 한다는 규칙에도 예외는 있다.<br/>
유효성 검사 비용이 지나치게 높거나 실용적이지 않을 때, 혹은 계산 과정에서 암묵적으로 검사가 수행될 때다.<br/>
ex) Collections.sort(List)<br/>

때로는 계산 과정에서 필요한 유효성 검사가 이뤄지지만 실패했을 때 잘못된 예외를 던지기도 한다.<br/>
달리 말하면, 계산 중 잘못된 매개변수 값을 사용해 발생한 예외와 API 문서에서 던지기로 한 예외가 다를 수 있다.<br/>

<h3>핵심 정리</h3>
메서드나 생성자를 작성할 때면 그 매개변수들에 어떤 제약이 있을지 생각해야 한다.<br/>
그 제약들을 문서화하고 메서드 코드 시작 부분에서 명시적으로 검사해야 한다.<br/>
이런 습관을 반드시 기르도록 하자.<br/>
그 노력은 유효성 검사가 실제 오류를 처음 걸러낼 떄 충분히 보상받을 수 있다.<br/>
