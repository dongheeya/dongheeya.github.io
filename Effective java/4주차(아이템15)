아이템 15. 클래스와 멤버의 접근 권한을 최소화하라.

 잘 설계된 컴포넌트 : 클래스 내부 데이터와 내부 구현 정보를 외부 컴포넌트로부터 얼마나 잘 숨겼냐의 차이.
 + 모든 내부 구현을 완벽하게 은닉 
 + 구현과 API를 깔끔히 분리
 + 오직 API를 통해서만 다른 컴포넌트와 소통하며 내부 동작 방식에는 전혀 개의치 않는다.
 
 [정보 은닉의 장점]
 - 시스템을 구성하는 컴포넌트들을 서로 독립시켜서 개발, 테스트, 최적화, 적용, 분석, 수정을 개별적으로 할수 있게 해주는것과 연관
 - 시스템 개발 속도를 높임
 - 시스템 비용을 낮춤 ( 디버깅이 쉬움, 다른 컴포넌트로 교체하는 부담 적음)
 - 성능 최적화에 도움이 됨. (다른 컴포넌트에 영향을 주지 않고 해당 컴포넌트만 최적화가 가능한 형태이기 때문)
 - SW 재사용성을 높임. ( 독자적으로 동작할 수 잇는 컴포넌트라면 그 컴포넌트와 함게 개발되지 않은 환경에서도 사용이 가능하기 때문)
 - 큰 시스템 제작시에 난이도를 낮춰줌 
 - 전체가 완성되지 않은 상태에서도 개별 컴포넌트의 동작을 검증 가능.
 
 정보 은닉을 위한 장치로는 '접근 제어 메커니즘'이 존재하는데, 각 요소의 접근성은 그 요소가 선언된 위치, 접근 제한자로 정해진다.
 
 * 정보은닉의 원칙 : "모든 클래스와 멤버의 접근성을 가능한 좁혀야한다,"
 즉, 소프트웨어가 올바른 동작하는 한 항상 가장 낮은 접근 수준을 부여해야한다.
 
[접근 지정자의 종류]
접근 범위가 좁은 순서대로 접근 지정자를 나열하면 아래와 같다.

- private : 멤버를 선언한 톱레벨 클래스에서만 접근할 수 있다.
- package-private : 멤버가 소속된 패키지 안의 모든 클래스에서 접근할 수 있다.접근 제한자를 지정하지 않았을 때 적용되는 패키지 접근 수준이다.
단 인터페이스의 멤버는 기본적으로 public이 적용된다.
- protected : package-private의 접근 범위를 포함하며, 이 멤버를 선언한 클래스의 하위 클래스에서도 접근할 수 있다.
- public : 모든 곳에서 접근할 수 있다.

[컴포넌트 설계 방법]
1. 클래스의 공개 API를 세심하게 설계한 후, 그 외의 모든 멤버는 private으로 만들자.
2. 오직 같은 패키지의 다른 클래스가 접근해야되는 멤버에 한해서는 packgae-private으로 풀어주자.
3. 권한을 풀어주는 일이 잦은 경우에는 컴포넌트를 분해하는 것을 고민하라.
4. private와 package-private 멤버는 모두 해당 클래스의 구현에 해당하므로 보통 공개API에 영향을 주지 않는다.
5. private or package-private에서 protected으로 바뀌는 순간, 대상 범위가 엄청 넓어지고, 공개 API이므로 영원히 지원돼야한다.
6. 따라서, protected멤버 수는 적을 수록 좋다.
7. 상위 클래스의 메서드를 재정의할 때에는 그 접근 수준을 상위 클래스에서보다 좁게 설정할 수 없다! (리스코프 치환 원칙, 컴파일 오류)
8. 테스트만을 위해서라도 priavate 멤버를 package-private까지만 풀어주는것을 허용해라.
9. public 이 아닌 것이 좋지만, 예외적으로 public static final을 쓰는 경우에는 공개해도 좋다.
10. 단, public static final이어도 길이가 0이 아닌 배열에서는 변경이 모두 가능하므로 공개해서는 안된다.
 
 10-ex) public static final Thing[] VALUES = {...}; // 보안상의 문제가 생김
 10-ex 해결점1) private static final Thing[] PRIVATE_VALUES = {... };
 public static final List<Thing> VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES)); // public 불변 리스트 추가
 10-ex 해결점2) private static final Thing[] PRIVATE_VALUES = {... };
 public static final Thing[] values(){  
  return PRIVATE_VALUES.clone();
 } // 깊은 복사 방법으로 전달해줌.
 

 
 
